---
### YAML syntax ###

# Конфигурирование системы логирования
logger:
    # Уровень логирования. Допускаются следующие значения: error, warning, info,
    # verbose, debug, debug2. По умолчанию используется info
    level: debug

    # Определяет будет ли пересоздаваться log-файл  при  перезапуске  программы
    # (флаг: true/false). Если параметр равен 'false', то log-файл будет  пере-
    # создаваться при каждом перезапуске программы, в противном случае  логиро-
    # вание будет выполняться в существующий файл
    continue: true

    max_line_size: 3000

    # Наименование файла логирования
    file: /var/opt/telebot/log/telebot.log

    # Определяет файл конфигурирования сейверов и фильтров для системы логирования
    conf: "" # /etc/telebot/telebot.logger.conf

    filters:
        # Наименование фильтра
      - name: default
        type: content
        mode: exclude
        filtering_errors: false

        contents: [
            "Webhook TCP input: {\"update_id\":",
        ]

# Настройки состояния приложения
#state:
#    file: /var/opt/telebot/state/telebot.state

bot:
    # Идентификатор бота
    id: "0000000000:AAFB4fmcn0Ytuqxk01twO-PgWSJieTWdi0Q"

    # Количество потоков обработки для сообщений
    processing_count: 1

    # Спам сообщение отправляется в групповой чат если его идентификатора нет
    # в списке group_chats. Цель: вынудить владельца/администратора группового
    # чата исключить бота из списка участников, чтобы не нагружать бота сообще-
    # ниями, которые он не будет обрабатывать
    spam_message:
        active: true
        text:
            Это Telebot Anti-Spam. Ваш чат не зарегистрирован в файле
            конфигурации бота. Удалите бота из группы.

webhook:
    # Создание Webhook-сертификата (https://core.telegram.org/bots/self-signed)
    #   openssl req -newkey rsa:2048 -sha256 -nodes -keyout private.key -x509 -days 365 -out cert.pem -subj "/C=RU/CN=HOST_OR_DOMAIN"
    #
    # В качестве параметра HOST_OR_DOMAIN нужно указать публичный IP-адрес (или
    # доменное имя), где будет располагаться бот.  В дальнейшем Telegram-сервис
    # будет обращаться именно по этому публичному адресу или домену.
    # В результате выполнения команды будут созданы два файла: private.key и cert.pem
    #
    # Просмотр созданного сертификата
    #   openssl x509 -text -noout -in cert.pem
    #
    # Регистрация Telegram-Webhook:
    #   - В качестве параметра HOST_OR_DOMAIN в сертификате было указано доменное имя my.domain.com
    #       curl -F"url=https://my.domain.com:8443/" -F"certificate=@cert.pem" https://api.telegram.org/botTOKENID/setWebhook
    #
    #   - В качестве параметра HOST_OR_DOMAIN в сертификате был указан публичный IP-адрес 179.2.35.60
    #       curl -F"url=https://179.2.35.60:8443/" -F"certificate=@cert.pem" https://api.telegram.org/botTOKENID/setWebhook
    #
    # Для Webhook-портов допускается указывать следующие значения: 443, 80, 88, 8443.
    # Вместо параметра TOKENID нужно подставить идентификатор Telegram-бота.

    port: 8443
    certificate: /etc/telebot/ssl/cert.pem
    private_key: /etc/telebot/ssl/private.key

triggers:
    # Наименование триггера
  - name: link1

    # Тип триггера link.
    # Триггер сработает если сообщение будет содержать http(s)-ссылки
    type: link

    # Признак активного триггера. Позволяет исключить триггер из процесса
    # обработки сообщений. Значение параметра по умолчанию равно TRUE
    active: true

    # Информационное описание триггера
    description: "Ссылки"

    # Список исключений (белый список).
    # Элемент списка исключения должен содержать host-часть адреса, а так же
    # может содержать часть url-пути.
    # Например, для url https://market.yandex.ru/product--kofevarka...
    #   market.yandex.ru - это хост-часть,
    #   product--kofevarka... - это url-путь (для примера путь урезан).
    # Таким образом, в списке исключений можно сделать следующую запись:
    # - host:  market.yandex.ru
    #   paths: [product]
    # Путей можно указать несколько:
    #   paths: [product, catalog, и т.д]
    # Примечание: при анализе  url-ссылки  сравнение  host-части  происходит
    #             с права налево, сравнение url-пути происходит слева направо.
    #
    white_list:
      - host:  market.yandex.ru
        paths: [product]
      - host:  market.yandex.ru
      - host:  citilink.ru
      - host:  aliexpress.ru

    # Действия триггера не распространяются на администраторов  группы  если
    # параметр установлен в TRUE. Значение параметра по умолчанию равно TRUE
    skip_admins: false

    # Список идентификаторов пользователей, на которых не распространяется
    # действие триггера
    white_users: []

    # Инвертирует результат работы триггера. Значение параметра по умолчанию
    # равно FALSE
    inverse: false

    # Наименование триггера
  - name: word1

    # Тип триггера word.
    # Триггер сработает если сообщение будет содержать слова из списка word_list
    type: word

    description: "Плохие слова"

    # Выполнять сравнение слов без учета регистра
    case_insensitive: true

    # Список слов для фильтрации
    word_list: [
        слово1,
        слово2
    ]

    # Наименование триггера
  - name: regexp1

    # Тип триггера regexp.
    # Триггер сработает если сообщение будет соответствовать любому регулярному
    # выражению из списка regexp_list
    type: regexp

    # Выполнять анализ регулярного выражения без учета регистра
    case_insensitive: true

    # Использовать многострочный режим, где ^ и $ соответствуют началу и концу
    # строки текста (а не началу и концу входной строки).
    # Смотри описание опции QRegularExpression::MultilineOption:
    #   https://doc.qt.io/qt-6/qregularexpression.html#PatternOption-enum
    multiline: false

    # Удаляет в исходном тексте фрагменты соответствующие регулярным выражениям
    # секции regexp_remove, что позволяет избавиться от нежелательных  срабаты-
    # ваний выражений из секции regexp_list.
    # Например, в тексте "Слова: а1а б2б в3в д4д" нужно  исключить  из  анализа
    # слова "б2б" и "в3в", для этого в секции regexp_remove создается регулярное
    # выражение "\\b(б2б|в3в)\\b". В результате исходный текст  будет  сокращен
    # до "Слова: а1а д4д". Далее сокращенный текст будет анализироваться  регу-
    # лярными выражениями из секции regexp_list
    regexp_remove: [
    ]

    # Список регулярных выражений
    regexp_list: [
        #--- Коверканные слова с латинскими буквами ---
        "\\b[а-я]+[a-z]+.*?\\b",
        "\\b[a-z]+[а-я]+.*?\\b",
        #--- Телефонные номера (Пример: https://habr.com/ru/post/110731/) ---
        "(?:(?:8|\\+[1-7]))?[\\- ]?\\(?\\d{3,4}\\)?[\\- ]?\\d{3}[\\- ]?\\d{2}[\\- ]?\\d{2}\\b",
    ]

  - name: one_symbol
    type: regexp
    description: "Одиночные/повторяющиеся символы"
    case_insensitive: true
    multiline: false

    # Список регулярных выражений
    regexp_list: [
        "^ *\\b(\\w)\\1*\\b *$", # Выражения вида Аааа, Оооо
    ]

group_chats:
    # Идентификатор чата @My_Group_Chat
  - id: -1001735679262

    # Информационная подпись для чата, используется при выводе лог-сообщений
    name: My_Group_Chat

    # Список триггеров
    triggers: [link1, word1, regexp1, one_symbol]

    # Действия триггеров не распространяются на администраторов группы если
    # параметр установлен в TRUE. Значение параметра по умолчанию равно TRUE
    skip_admins: false

    # Список идентификаторов пользователей, на которых не распространяется
    # действие триггеров
    white_users: []

    # Количество спам-сообщений по достижении которого пользователь блокируется.
    # Если параметр равен 0 пользователь блокироваться не будет. Значение пара-
    # метра по умолчанию равно 5
    user_spam_limit: 5

...
