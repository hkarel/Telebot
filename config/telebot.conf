---
### YAML syntax ###

# Конфигурирование системы логирования
logger:
    # Уровень логирования. Допускаются следующие значения: error, warning, info,
    # verbose, debug, debug2. По умолчанию используется info
    level: debug

    # Определяет будет ли пересоздаваться log-файл  при  перезапуске  программы
    # (флаг: true/false). Если параметр равен 'false', то log-файл будет  пере-
    # создаваться при каждом перезапуске программы, в противном случае  логиро-
    # вание будет выполняться в существующий файл
    continue: true

    # Наименование файла логирования
    file: /var/opt/telebot/log/telebot.log

    # Определяет файл конфигурирования сейверов и фильтров для системы логирования
    conf: /etc/telebot/telebot.logger.conf

# Настройки состояния приложения
#state:
#    file: /var/opt/telebot/state/telebot.state

bot:
    # Идентификатор бота
    id: "0000000000:AAFB4fmcn0Ytuqxk01twO-PgWSJieTWdi0Q"

    # Количество потоков обработки для сообщений
    processing_count: 1

    # Спам сообщение отправляется в групповой чат если его идентификатора нет
    # в списке group_chats. Цель: вынудить владельца/администратора группового
    # чата исключить бота из списка участников, чтобы не нагружать бота сообще-
    # ниями, которые он не будет обрабатывать
    spam_message:
        active: true
        text:
            Это Telebot Anti-Spam. Ваш чат не зарегистрирован в файле
            конфигурации бота, поэтому данное сообщение будет появляться
            в ответ на любое сообщение в чате. Удалите бота из списка
            участников группы, чтобы избавиться от этого сообщения.

webhook:
    # Создание Webhook-сертификата (https://core.telegram.org/bots/self-signed)
    #   openssl req -newkey rsa:2048 -sha256 -nodes -keyout private.key -x509 -days 365 -out cert.pem -subj "/C=RU/CN=HOST_OR_DOMAIN"
    #
    # В качестве параметра HOST_OR_DOMAIN нужно указать публичный IP-адрес, где
    # будет располагаться бот или доменное имя. В дальнейшем Telegram-сервис
    # будет обращаться именно по этому публичному адресу или домену.
    #
    # Просмотр созданного сертификата
    #   openssl x509 -text -noout -in cert.pem
    #
    # Регистрация Telegram-Webhook:
    #   - В качестве параметра HOST_OR_DOMAIN в сертификате было указано доменное имя my.domain.com
    #       curl -F"url=https://my.domain.com:8443/" -F"certificate=@cert.pem" https://api.telegram.org/botTOKENID/setWebhook
    #
    #   - В качестве параметра HOST_OR_DOMAIN в сертификате был указан публичный IP-адрес 179.2.35.60
    #       curl -F"url=https://179.2.35.60:8443/" -F"certificate=@cert.pem" https://api.telegram.org/botTOKENID/setWebhook
    #
    # Для Webhook-портов допускается указывать следующие значения: 443, 80, 88, 8443.
    # Вместо параметра TOKENID подставляется идентификатор Telegram-бота.

    port: 8443
    certificate: /etc/telebot/ssl/cert.pem
    private_key: /etc/telebot/ssl/private.key

triggers:
    # Наименование триггера
  - name: link1

    # Тип триггера link.
    # Триггер будет срабатывать когда сообщение содержит ссылки
    type: link

    # Список исключений (белый список).
    # Элемент списка исключения должен содержать host-часть адреса, а так же
    # может содержать часть url-пути.
    # Например, для url https://market.yandex.ru/product--kofevarka...
    #   market.yandex.ru - это хост-часть,
    #   product--kofevarka... - это url-путь (для примера путь урезан).
    # Таким образом, в списке исключений можно сделать следующую запись:
    #   market.yandex.ru/product
    #
    white_list: [
        yandex.ru,
        mail.ru,
        market.yandex.ru/product
    ]

    # Действия триггера не распространяются на администраторов группы если
    # параметр установлен в TRUE (значение параметра по умолчанию равно FALSE)
    skip_admins: false

    # Список идентификаторов пользователей, на которых не распространяется
    # действие триггера
    white_users: []

    # Наименование триггера
  - name: word1

    # Тип триггера word.
    # Триггер будет срабатывать когда сообщение содержит слова из списка word_list
    type: word

    # Выполнять сравнение слов без учета регистра
    case_insensitive: true

    # Список слов для фильтрации
    word_list: [
        слово1,
        слово2
    ]

    # Наименование триггера
  - name: regexp1

    # Тип триггера regexp.
    # Триггер будет срабатывать когда сообщение будет соответствовать регулярным
    # выражениям из списка regexp_list
    type: regexp

    # Выполнять анализ регулярного выражения без учета регистра
    case_insensitive: true

    # Использовать многострочный режим, где ^ и $ соответствуют началу и концу
    # строки текста (а не началу и концу входной строки).
    # Смотри описание опции QRegularExpression::MultilineOption:
    #   https://doc.qt.io/qt-6/qregularexpression.html#PatternOption-enum
    multiline: false

    # Список регулярных выражений
    regexp_list: [
        ".*",
    ]

group_chats:
    # Идентификатор чата @My_Group_Chat
  - id: -1001735679262

    # Информационная подпись для чата, используется при выводе лог-сообщений
    name: My_Group_Chat

    # Список триггеров
    triggers: [link1, word1]

    # Действия триггеров не распространяются на администраторов группы если
    # параметр установлен в TRUE (значение параметра по умолчанию равно TRUE)
    skip_admins: false

    # Список идентификаторов пользователей, на которых не распространяется
    # действие триггеров
    white_users: []

...
