---
### YAML syntax ###

# Типы триггеров:
#   link_disable - Запрещает в сообщении http(s)-ссылки и ТГ-ссылки, за исключе-
#                  нием ссылок из белого списка (white_list);
#   link_enable  - Разрешает в сообщении http(s)-ссылки и ТГ-ссылки, за исключе-
#                  нием ссылок из черного  списка  (black_list). Так же у этого
#                  типа триггера есть белый  список,  он  имеет  приоритет  над
#                  black_list;
#   link         - Аналог link_disable;
#   word         - Срабатывает на слова из списка слов;
#   regexp       - Срабатывает на регулярные выражения из списка рег. выражений.

triggers:
    # Наименование триггера
  - name: link1

    # Тип триггера link_disable.
    # Триггер сработает если сообщение будет содержать http(s)-ссылки
    type: link_disable

    # Признак активного триггера. Позволяет исключить триггер из процесса
    # обработки сообщений. Значение параметра по умолчанию равно TRUE
    active: true

    # Информационное описание триггера
    description: "Ссылки"

    # Список исключений (белый список).
    # Элемент списка исключения должен содержать host-часть адреса, а так же
    # может содержать часть url-пути.
    # Например, для url https://market.yandex.ru/product--kofevarka...
    #   market.yandex.ru - это хост-часть,
    #   product--kofevarka... - это url-путь (для примера путь урезан).
    # Таким образом, в списке исключений можно сделать следующую запись:
    # - host:  market.yandex.ru
    #   paths: [product]
    # Путей можно указать несколько:
    #   paths: [product, catalog, и т.д]
    # Примечание: при анализе  url-ссылки  сравнение  host-части  происходит
    #             с права налево, сравнение url-пути происходит слева направо.
    #
    white_list:
      - host:  market.yandex.ru
        paths: [product]
      - host:  market.yandex.ru
      - host:  citilink.ru
      - host:  aliexpress.ru

    # Действия триггера не распространяются на администраторов  группы  если
    # параметр установлен в TRUE. Значение параметра по умолчанию равно TRUE
    skip_admins: false

    # Список идентификаторов пользователей, на которых не распространяется
    # действие триггера
    white_users: []

    # Инвертирует результат работы триггера. Значение параметра по умолчанию
    # равно FALSE
    inverse: false

    # Наименование триггера
  - name: word1

    # Тип триггера word.
    # Триггер сработает если сообщение будет содержать слова из списка word_list
    type: word

    description: "Плохие слова"

    # Выполнять сравнение слов без учета регистра
    case_insensitive: true

    # Список слов для фильтрации
    word_list: [
        слово1,
        слово2
    ]

    # Наименование триггера
  - name: regexp1

    # Тип триггера regexp.
    # Триггер сработает если сообщение будет соответствовать любому регулярному
    # выражению из списка regexp_list
    type: regexp

    # Выполнять анализ регулярного выражения без учета регистра
    case_insensitive: true

    # Использовать многострочный режим, где ^ и $ соответствуют началу и концу
    # строки текста (а не началу и концу входной строки).
    # Смотри описание опции QRegularExpression::MultilineOption:
    #   https://doc.qt.io/qt-6/qregularexpression.html#PatternOption-enum
    multiline: false

    # Определяет что будет анализироваться: контент сообщения (content) или имя
    # пользователя (username).
    # Параметр может принимать значения: content, username. Значение параметра
    # по умолчанию равно content
    analyze: content

    # Если триггер  однозначно  идентифицирует  спам-сообщение, то пользователя
    # можно заблокировать сразу. Значение параметра по умолчанию равно FALSE
    immediately_ban: false

    # Удаляет в исходном тексте фрагменты соответствующие регулярным выражениям
    # секции regexp_remove, что позволяет избавиться от нежелательных  срабаты-
    # ваний выражений из секции regexp_list.
    # Например, в тексте "Слова: а1а б2б в3в д4д" нужно  исключить  из  анализа
    # слова "б2б" и "в3в", для этого в секции regexp_remove создается регулярное
    # выражение "\\b(б2б|в3в)\\b". В результате исходный текст  будет  сокращен
    # до "Слова: а1а д4д". Далее сокращенный текст будет анализироваться  регу-
    # лярными выражениями из секции regexp_list
    regexp_remove: []

    # Список регулярных выражений
    regexp_list: [
        #--- Коверканные слова с латинскими буквами ---
        "\\b[а-я]+[a-z]+.*?\\b",
        "\\b[a-z]+[а-я]+.*?\\b",
        #--- Телефонные номера (Пример: https://habr.com/ru/post/110731/) ---
        "(?:(?:8|\\+[1-7]))?[\\- ]?\\(?\\d{3,4}\\)?[\\- ]?\\d{3}[\\- ]?\\d{2}[\\- ]?\\d{2}\\b",
    ]

  - name: one_symbol
    type: regexp
    description: "Одиночные/повторяющиеся символы"
    case_insensitive: true
    multiline: false

    # Список регулярных выражений
    regexp_list: [
        "^ *\\b(\\w)\\1*\\b *$", # Выражения вида Аааа, Оооо
    ]

  - name: user_name
    type: regexp
    description: "Имя пользователя"
    case_insensitive: true
    multiline: false
    analyze: username

    regexp_list: [
        "User.*Name",
    ]

group_chats:
    # Идентификатор чата @My_Group_Chat
  - id: -1001735679262

    # Информационная подпись для чата, используется при выводе лог-сообщений
    name: My_Group_Chat

    # Список триггеров
    triggers: [link1, word1, regexp1, one_symbol, user_name]

    # Действия триггеров не распространяются на администраторов группы если
    # параметр установлен в TRUE. Значение параметра по умолчанию равно TRUE
    skip_admins: false

    # Список идентификаторов пользователей, на которых не распространяется
    # действие триггеров
    white_users: []

    # Количество спам-сообщений по достижении которого пользователь блокируется.
    # Если параметр меньше или равен  0  пользователь  блокироваться  не  будет.
    # Значение параметра по умолчанию равно 5
    user_spam_limit: 5

    # Ограничение пользователя за публикацию спам-сообщений. За первое сообщение
    # ограничение на 10 мин, за второе - 30 мин, за третье и более - 60 мин
    user_restricts: [10, 30, 60]

...
